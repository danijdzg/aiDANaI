const CACHE_NAME = 'aidanai-agenda-v1';
const urlsToCache = [
  './', // Ruta base, incluyendo index.html
  './index.html',
  './aiDANaI-Agenda.jpg',
  'https://npmcdn.com/parse/dist/parse.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js'
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Caché abierto');
        return cache.addAll(urlsToCache);
      })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // Si hay una coincidencia en la caché, devuelve la respuesta
        if (response) {
          return response;
        }
        // Si no, intenta obtenerla de la red
        return fetch(event.request).then(
          (response) => {
            // Verifica si recibimos una respuesta válida
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }
            // IMPORTANTE: Clona la respuesta. Una respuesta es un stream
            // y solo puede ser consumida una vez. Debemos clonarla para
            // poder consumir el stream dos veces.
            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
  );
});

self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            // Elimina las cachés antiguas
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});